
(function($){
    var game = new Phaser.Game(960, 600, Phaser.CANVAS, 'gamecontainer', { preload: preload, create: create, update: update });
    var spaceship;
    var asteroid;
    var asteroids;
    var bullet;
    var bullets;
    var explosions;
    var explode;
    var fireButton;
    var asteroidTime = 0;
    var bulletTime = 0;
    var asteroidXPath;
    var asteroidYPath;
    var score = 0;
    var firing = "go";

    function preload() {
        game.load.image('starbackground', '<%= image_path('starrybackground.png') %>');
        game.load.image('spaceship', '<%= image_path('spaceship.png') %>');
        game.load.image('bullet', '<%= image_path('torpedo2.png') %>');
        game.load.image('asteroid', '<%= image_path('asteroids_demo.png') %>');
        game.load.spritesheet('asteroidExplosion', '<%= image_path('explosion_sprite_sheet1.png') %>', 128, 128);
    }

    function create() {
        //Starry background
        starbackground = game.add.tileSprite(0, 0, 960, 600, 'starbackground');
        // Add spaceship to the game
        spaceship = game.add.sprite(game.world.width/2, game.world.height - 100, 'spaceship');
        //  Enable physics on the spaceship
        game.physics.arcade.enable(spaceship);

        //  move the ship left and right
        spaceship.animations.add('left', [0, 1, 2, 3], 10, true);
        spaceship.animations.add('right', [5, 6, 7, 8], 10, true);

        //  Our bullet group
        bullets = game.add.group();
        bullets.enableBody = true;
        bullets.physicsBodyType = Phaser.Physics.ARCADE;
        bullets.createMultiple(30, 'bullet');
        bullets.setAll('anchor.x', 0.5);
        bullets.setAll('anchor.y', 1);
        bullets.setAll('outOfBoundsKill', true);
        bullets.setAll('checkWorldBounds', true);

        //  Our asteroid group
        asteroids = game.add.group();
        asteroids.enableBody = true;
        asteroids.physicsBodyType = Phaser.Physics.ARCADE;
        asteroids.createMultiple(100, 'asteroid');
        asteroids.setAll('anchor.x', 0.5);
        asteroids.setAll('anchor.y', 1);
        asteroids.setAll('outOfBoundsKill', true);
        asteroids.setAll('checkWorldBounds', true);

        //add score keeper
        scoreText = game.add.text(game.world.centerX - 475, game.world.centerY - 295, "Score: 0", {
        font: "40px Arial",
        fill: "#F83F00",
        align: "left"
        });
        

        gameOverText = game.add.text(game.world.centerX,game.world.centerY,' ', { font: '84px Arial', fill: '#fff' });
        gameOverText.anchor.setTo(0.5, 0.5);
        gameOverText.visible = false;

        // Setup spacebar as fire button
        fireButton = game.input.keyboard.addKey(Phaser.Keyboard.SPACEBAR);


    }

    function update() {
        // move background
        starbackground.tilePosition.y += 2;

        //drop the asteroid
        asteroidDrop();

        // find the ship position to send our asteroids to
        asteroidXPath = spaceship.world.x;
        asteroidYPath = spaceship.world.y;


        // Setup collisions ***not currently working***
        game.physics.arcade.overlap(asteroids, bullets, bulletHitAsteroid, null, this);
        game.physics.arcade.overlap(asteroids, spaceship, asteroidHitSpaceship, null, this);
        game.physics.arcade.collide(asteroids, asteroids);


        var cursors = game.input.keyboard.createCursorKeys();
        //  Reset the players velocity (movement)
        spaceship.body.velocity.x = 0;

        if (cursors.left.isDown)
        {
            //  Move to the left
            spaceship.body.velocity.x = -150;

            spaceship.animations.play('left');
        }
        else if (cursors.right.isDown)
        {
            //  Move to the right
            spaceship.body.velocity.x = 150;

            spaceship.animations.play('right');
        }
        else
        {
            //  Stand still
            spaceship.animations.stop();

            spaceship.frame = 4;
        }

        //  Firing?
        if (fireButton.isDown && firing == "go")
        {
            fireBullet();
        }

        screenBorder(spaceship);
        
        function fireBullet () {

            //  To avoid them being allowed to fire too fast we set a time limit
            if (game.time.now > bulletTime)
            {
                //  Grab the first bullet we can from the pool
                bullet = bullets.getFirstExists(false);

                if (bullet)
                {
                    //  And fire it
                    bullet.reset(spaceship.x + 30, spaceship.y + 8);
                    bullet.body.velocity.y = -400;
                    bulletTime = game.time.now + 200;
                }
            }

        }

        function asteroidDrop() {

            //  To avoid them being allowed to fire too fast we set a time limit
            if (game.time.now > asteroidTime)
            {
                //  Grab the first asteroid we can from the pool
                asteroid = asteroids.getFirstExists(false);

                if (asteroid)
                {
                    //  And fire it
                    asteroid.reset(game.world.randomX, 0);
                    game.physics.arcade.moveToXY(asteroid, asteroidXPath, asteroidYPath, 100);
                    asteroidTime = game.time.now + 600;

                }
            }

        }


        function resetBullet (bullet) {

            //  Called if the bullet goes out of the screen
            bullet.kill();

        }

        function bulletHitAsteroid(asteroid, bullet) {

            // kill asteroid
            asteroid.kill();

            // kill bullet
            bullet.kill();

            updateScore();

            // Explosions
            explosions = game.add.sprite(asteroid.x - (asteroid.width), asteroid.y - (asteroid.height), 'asteroidExplosion');
            explode = explosions.animations.add('explode');
            explosions.animations.play('explode', 50);

          }

        function asteroidHitSpaceship(spaceship, asteroid) {

           firing = "stop";

            // kill asteroid
            asteroid.kill();

            // kill spaceship
            spaceship.kill();

            explosions = game.add.sprite(spaceship.x - 40, spaceship.y - 30, 'asteroidExplosion');
            explode = explosions.animations.add('explode');
            explosions.animations.play('explode', 10);

            gameOver();
          }

        function updateScore() {

            score++;

            scoreText.setText("Score: " + score + "");

        }

        function gameOver() {

          gameOverText.text=" GAME OVER \n Click to restart";
          gameOverText.visible = true;

          //the "click to restart" handler
          game.input.onTap.addOnce(restart,this);

        }

        function restart () {
            //allows firing again
            firing = "go";
            //  A new level starts

            //  And brings the aliens back from the dead :)
            asteroids.removeAll();
            //runs create function to bring back all the objects
            create()
            
            score = 0;

            //hides the text
            gameOverText.visible = false;

        }

        function screenBorder(spaceship){
            if (spaceship.x < 0){
                spaceship.x = 0;
            }
            if (spaceship.x > game.width - spaceship.width -1 ){
                spaceship.x =  game.width - spaceship.width;
            }
        }


    }
})(jQuery);
